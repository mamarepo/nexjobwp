"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "src_services_wpService_ts";
exports.ids = ["src_services_wpService_ts"];
exports.modules = {

/***/ "./src/services/wpService.ts":
/*!***********************************!*\
  !*** ./src/services/wpService.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WordPressService: () => (/* binding */ WordPressService),\n/* harmony export */   wpService: () => (/* binding */ wpService)\n/* harmony export */ });\nclass WordPressService {\n    setBaseUrl(url) {\n        this.baseUrl = url;\n    }\n    setFiltersApiUrl(url) {\n        this.filtersApiUrl = url;\n    }\n    setAuthToken(token) {\n        this.authToken = token;\n    }\n    getHeaders() {\n        const headers = {\n            \"Content-Type\": \"application/json\"\n        };\n        if (this.authToken) {\n            headers[\"Authorization\"] = `Bearer ${this.authToken}`;\n        }\n        return headers;\n    }\n    decodeHtmlEntities(text) {\n        if (typeof document === \"undefined\") {\n            // Server-side fallback\n            return text.replace(/&/g, \"&\").replace(/</g, \"<\").replace(/>/g, \">\").replace(/\"/g, '\"').replace(/&#39;/g, \"'\");\n        }\n        const textarea = document.createElement(\"textarea\");\n        textarea.innerHTML = text;\n        return textarea.value;\n    }\n    stripHtmlTags(html) {\n        if (typeof document === \"undefined\") {\n            // Server-side fallback\n            return html.replace(/<[^>]*>/g, \"\");\n        }\n        const div = document.createElement(\"div\");\n        div.innerHTML = html;\n        return div.textContent || div.innerText || \"\";\n    }\n    getPreferredDescription(excerptRendered, rankMathDescription) {\n        // First try rank_math_description if it exists and is not empty\n        if (rankMathDescription && rankMathDescription.trim() !== \"\") {\n            return this.stripHtmlTags(this.decodeHtmlEntities(rankMathDescription));\n        }\n        // Fall back to excerpt if available\n        if (excerptRendered && excerptRendered.trim() !== \"\") {\n            return this.stripHtmlTags(this.decodeHtmlEntities(excerptRendered));\n        }\n        return \"\";\n    }\n    async getFiltersData() {\n        try {\n            const response = await fetch(this.filtersApiUrl, {\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch filters data\");\n            }\n            const data = await response.json();\n            // Decode HTML entities in filter data\n            const decodedData = {\n                nexjob_lokasi_provinsi: {},\n                nexjob_kategori_pekerjaan: [],\n                nexjob_tipe_pekerjaan: [],\n                nexjob_pengalaman_kerja: [],\n                nexjob_pendidikan: [],\n                nexjob_kebijakan_kerja: [],\n                nexjob_industri: []\n            };\n            // Decode location data\n            if (data.nexjob_lokasi_provinsi) {\n                Object.keys(data.nexjob_lokasi_provinsi).forEach((province)=>{\n                    const decodedProvince = this.decodeHtmlEntities(province);\n                    decodedData.nexjob_lokasi_provinsi[decodedProvince] = data.nexjob_lokasi_provinsi[province].map((city)=>this.decodeHtmlEntities(city));\n                });\n            }\n            // Decode other filter arrays\n            const filterKeys = [\n                \"nexjob_kategori_pekerjaan\",\n                \"nexjob_tipe_pekerjaan\",\n                \"nexjob_pengalaman_kerja\",\n                \"nexjob_pendidikan\",\n                \"nexjob_kebijakan_kerja\",\n                \"nexjob_industri\"\n            ];\n            filterKeys.forEach((key)=>{\n                if (data[key] && Array.isArray(data[key])) {\n                    decodedData[key] = data[key].map((item)=>this.decodeHtmlEntities(item));\n                }\n            });\n            return decodedData;\n        } catch (error) {\n            console.error(\"Error fetching filters data:\", error);\n            // Return fallback data\n            return this.getFallbackFiltersData();\n        }\n    }\n    getFallbackFiltersData() {\n        return {\n            nexjob_lokasi_provinsi: {\n                \"DKI Jakarta\": [\n                    \"Jakarta Pusat\",\n                    \"Jakarta Selatan\",\n                    \"Jakarta Barat\",\n                    \"Jakarta Utara\",\n                    \"Jakarta Timur\"\n                ],\n                \"Jawa Barat\": [\n                    \"Bandung\",\n                    \"Bekasi\",\n                    \"Bogor\",\n                    \"Depok\",\n                    \"Tangerang\"\n                ],\n                \"Jawa Timur\": [\n                    \"Surabaya\",\n                    \"Malang\",\n                    \"Kediri\",\n                    \"Sidoarjo\"\n                ],\n                \"Jawa Tengah\": [\n                    \"Semarang\",\n                    \"Solo\",\n                    \"Yogyakarta\"\n                ],\n                \"Bali\": [\n                    \"Denpasar\",\n                    \"Ubud\",\n                    \"Sanur\"\n                ],\n                \"Sumatera Utara\": [\n                    \"Medan\",\n                    \"Binjai\"\n                ]\n            },\n            nexjob_kategori_pekerjaan: [\n                \"Teknologi Informasi\",\n                \"Digital Marketing\",\n                \"Customer Service\",\n                \"Human Resources\",\n                \"Sales\",\n                \"Akuntansi\",\n                \"Healthcare\",\n                \"Pendidikan\",\n                \"Logistik\"\n            ],\n            nexjob_tipe_pekerjaan: [\n                \"Full Time\",\n                \"Part Time\",\n                \"Contract\",\n                \"Freelance\",\n                \"Internship\"\n            ],\n            nexjob_pengalaman_kerja: [\n                \"Fresh Graduate\",\n                \"1-2 Tahun\",\n                \"2-3 Tahun\",\n                \"3-5 Tahun\",\n                \"5+ Tahun\"\n            ],\n            nexjob_pendidikan: [\n                \"SMA/SMK\",\n                \"D3\",\n                \"S1\",\n                \"S2\"\n            ],\n            nexjob_kebijakan_kerja: [\n                \"On-site Working\",\n                \"Remote Working\",\n                \"Hybrid Working\"\n            ],\n            nexjob_industri: [\n                \"Teknologi Informasi\",\n                \"Perbankan\",\n                \"Healthcare\",\n                \"Pendidikan\",\n                \"E-commerce\",\n                \"Otomotif\",\n                \"Digital Marketing\",\n                \"Human Resources\",\n                \"Customer Service\",\n                \"Sales\",\n                \"Logistik\",\n                \"Akuntansi\"\n            ]\n        };\n    }\n    async testConnection() {\n        try {\n            const response = await fetch(`${this.baseUrl}/lowongan-kerja?per_page=1`, {\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data[0] || null\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    }\n    async testFiltersConnection() {\n        try {\n            const response = await fetch(this.filtersApiUrl, {\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data: data\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        }\n    }\n    async getJobs(filters, page = 1, perPage = 24) {\n        try {\n            let url = `${this.baseUrl}/lowongan-kerja?per_page=${perPage}&page=${page}&_embed`;\n            // Add search parameter if provided\n            if (filters?.search) {\n                url += `&search=${encodeURIComponent(filters.search)}`;\n            }\n            const response = await fetch(url, {\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch jobs\");\n            }\n            const wpJobs = await response.json();\n            // Get total pages from headers\n            const totalPages = parseInt(response.headers.get(\"X-WP-TotalPages\") || \"1\");\n            const totalJobs = parseInt(response.headers.get(\"X-WP-Total\") || \"0\");\n            // Transform WordPress data to our Job interface\n            let jobs = wpJobs.map((wpJob)=>{\n                // Extract meta fields with nexjob_ prefix\n                const meta = wpJob.meta || {};\n                return {\n                    id: wpJob.id.toString(),\n                    slug: wpJob.slug,\n                    title: this.decodeHtmlEntities(wpJob.title.rendered),\n                    content: wpJob.content.rendered,\n                    company_name: this.decodeHtmlEntities(meta.nexjob_nama_perusahaan || \"Perusahaan\"),\n                    kategori_pekerjaan: this.decodeHtmlEntities(meta.nexjob_kategori_pekerjaan || \"\"),\n                    lokasi_provinsi: this.decodeHtmlEntities(meta.nexjob_lokasi_provinsi || \"\"),\n                    lokasi_kota: this.decodeHtmlEntities(meta.nexjob_lokasi_kota || \"\"),\n                    tipe_pekerjaan: this.decodeHtmlEntities(meta.nexjob_tipe_pekerjaan || \"Full Time\"),\n                    pendidikan: this.decodeHtmlEntities(meta.nexjob_pendidikan || \"\"),\n                    industry: this.decodeHtmlEntities(meta.nexjob_industri || \"\"),\n                    pengalaman: this.decodeHtmlEntities(meta.nexjob_pengalaman_kerja || \"\"),\n                    tag: this.decodeHtmlEntities(meta.nexjob_tag_loker || \"\"),\n                    gender: this.decodeHtmlEntities(meta.nexjob_gender || \"\"),\n                    gaji: this.decodeHtmlEntities(meta.nexjob_gaji || \"Negosiasi\"),\n                    kebijakan_kerja: this.decodeHtmlEntities(meta.nexjob_kebijakan_kerja || \"\"),\n                    link: meta.nexjob_link_loker || wpJob.link,\n                    sumber_lowongan: this.decodeHtmlEntities(meta.nexjob_sumber_loker || \"Nexjob\"),\n                    created_at: wpJob.date,\n                    seo_title: this.decodeHtmlEntities(meta.rank_math_title || wpJob.title.rendered),\n                    seo_description: this.getPreferredDescription(wpJob.excerpt?.rendered || \"\", meta.rank_math_description || \"\"),\n                    _id: {\n                        $oid: wpJob.id.toString()\n                    },\n                    id_obj: {\n                        $numberInt: wpJob.id.toString()\n                    }\n                };\n            });\n            // Apply client-side filtering for fields not supported by WordPress search\n            jobs = this.filterJobs(jobs, filters);\n            // Apply sorting\n            if (filters?.sortBy === \"newest\") {\n                jobs = jobs.sort((a, b)=>{\n                    const dateA = new Date(a.created_at || \"\").getTime();\n                    const dateB = new Date(b.created_at || \"\").getTime();\n                    return dateB - dateA; // Newest first\n                });\n            }\n            return {\n                jobs,\n                totalPages,\n                currentPage: page,\n                totalJobs,\n                hasMore: page < totalPages\n            };\n        } catch (error) {\n            console.error(\"Error fetching jobs:\", error);\n            // Return mock data as fallback\n            const mockJobs = this.getMockJobs(filters);\n            return {\n                jobs: mockJobs,\n                totalPages: 1,\n                currentPage: 1,\n                totalJobs: mockJobs.length,\n                hasMore: false\n            };\n        }\n    }\n    // Legacy method for backward compatibility\n    async getAllJobs(filters) {\n        const response = await this.getJobs(filters, 1, 100);\n        return response.jobs;\n    }\n    async getJobBySlug(slug) {\n        try {\n            const response = await fetch(`${this.baseUrl}/lowongan-kerja?slug=${slug}&_embed`, {\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Job not found\");\n            }\n            const wpJobs = await response.json();\n            if (!wpJobs || wpJobs.length === 0) {\n                return null;\n            }\n            const wpJob = wpJobs[0];\n            const meta = wpJob.meta || {};\n            return {\n                id: wpJob.id.toString(),\n                slug: wpJob.slug,\n                title: this.decodeHtmlEntities(wpJob.title.rendered),\n                content: wpJob.content.rendered,\n                company_name: this.decodeHtmlEntities(meta.nexjob_nama_perusahaan || \"Perusahaan\"),\n                kategori_pekerjaan: this.decodeHtmlEntities(meta.nexjob_kategori_pekerjaan || \"\"),\n                lokasi_provinsi: this.decodeHtmlEntities(meta.nexjob_lokasi_provinsi || \"\"),\n                lokasi_kota: this.decodeHtmlEntities(meta.nexjob_lokasi_kota || \"\"),\n                tipe_pekerjaan: this.decodeHtmlEntities(meta.nexjob_tipe_pekerjaan || \"Full Time\"),\n                pendidikan: this.decodeHtmlEntities(meta.nexjob_pendidikan || \"\"),\n                industry: this.decodeHtmlEntities(meta.nexjob_industri || \"\"),\n                pengalaman: this.decodeHtmlEntities(meta.nexjob_pengalaman_kerja || \"\"),\n                tag: this.decodeHtmlEntities(meta.nexjob_tag_loker || \"\"),\n                gender: this.decodeHtmlEntities(meta.nexjob_gender || \"\"),\n                gaji: this.decodeHtmlEntities(meta.nexjob_gaji || \"Negosiasi\"),\n                kebijakan_kerja: this.decodeHtmlEntities(meta.nexjob_kebijakan_kerja || \"\"),\n                link: meta.nexjob_link_loker || wpJob.link,\n                sumber_lowongan: this.decodeHtmlEntities(meta.nexjob_sumber_loker || \"Nexjob\"),\n                created_at: wpJob.date,\n                seo_title: this.decodeHtmlEntities(meta.rank_math_title || wpJob.title.rendered),\n                seo_description: this.getPreferredDescription(wpJob.excerpt?.rendered || \"\", meta.rank_math_description || \"\"),\n                _id: {\n                    $oid: wpJob.id.toString()\n                },\n                id_obj: {\n                    $numberInt: wpJob.id.toString()\n                }\n            };\n        } catch (error) {\n            console.error(\"Error fetching job:\", error);\n            return null;\n        }\n    }\n    async getJobById(id) {\n        try {\n            const response = await fetch(`${this.baseUrl}/lowongan-kerja/${id}?_embed`, {\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Job not found\");\n            }\n            const wpJob = await response.json();\n            const meta = wpJob.meta || {};\n            return {\n                id: wpJob.id.toString(),\n                slug: wpJob.slug,\n                title: this.decodeHtmlEntities(wpJob.title.rendered),\n                content: wpJob.content.rendered,\n                company_name: this.decodeHtmlEntities(meta.nexjob_nama_perusahaan || \"Perusahaan\"),\n                kategori_pekerjaan: this.decodeHtmlEntities(meta.nexjob_kategori_pekerjaan || \"\"),\n                lokasi_provinsi: this.decodeHtmlEntities(meta.nexjob_lokasi_provinsi || \"\"),\n                lokasi_kota: this.decodeHtmlEntities(meta.nexjob_lokasi_kota || \"\"),\n                tipe_pekerjaan: this.decodeHtmlEntities(meta.nexjob_tipe_pekerjaan || \"Full Time\"),\n                pendidikan: this.decodeHtmlEntities(meta.nexjob_pendidikan || \"\"),\n                industry: this.decodeHtmlEntities(meta.nexjob_industri || \"\"),\n                pengalaman: this.decodeHtmlEntities(meta.nexjob_pengalaman_kerja || \"\"),\n                tag: this.decodeHtmlEntities(meta.nexjob_tag_loker || \"\"),\n                gender: this.decodeHtmlEntities(meta.nexjob_gender || \"\"),\n                gaji: this.decodeHtmlEntities(meta.nexjob_gaji || \"Negosiasi\"),\n                kebijakan_kerja: this.decodeHtmlEntities(meta.nexjob_kebijakan_kerja || \"\"),\n                link: meta.nexjob_link_loker || wpJob.link,\n                sumber_lowongan: this.decodeHtmlEntities(meta.nexjob_sumber_loker || \"Nexjob\"),\n                created_at: wpJob.date,\n                seo_title: this.decodeHtmlEntities(meta.rank_math_title || wpJob.title.rendered),\n                seo_description: this.getPreferredDescription(wpJob.excerpt?.rendered || \"\", meta.rank_math_description || \"\"),\n                _id: {\n                    $oid: wpJob.id.toString()\n                },\n                id_obj: {\n                    $numberInt: wpJob.id.toString()\n                }\n            };\n        } catch (error) {\n            console.error(\"Error fetching job:\", error);\n            return null;\n        }\n    }\n    async getRelatedJobs(currentJobId, category, limit = 4) {\n        try {\n            const allJobs = await this.getAllJobs();\n            return allJobs.filter((job)=>job.id !== currentJobId && job.kategori_pekerjaan.toLowerCase().includes(category.toLowerCase())).slice(0, limit);\n        } catch (error) {\n            console.error(\"Error fetching related jobs:\", error);\n            return [];\n        }\n    }\n    async getArticles(limit) {\n        try {\n            let url = `${this.baseUrl}/posts?_embed`;\n            if (limit) {\n                url += `&per_page=${limit}`;\n            }\n            const response = await fetch(url, {\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch articles\");\n            }\n            const articles = await response.json();\n            // Add featured image URL and author info if available\n            return articles.map((article)=>({\n                    ...article,\n                    title: {\n                        ...article.title,\n                        rendered: this.decodeHtmlEntities(article.title.rendered)\n                    },\n                    excerpt: {\n                        ...article.excerpt,\n                        rendered: this.decodeHtmlEntities(article.excerpt.rendered)\n                    },\n                    featured_media_url: article._embedded?.[\"wp:featuredmedia\"]?.[0]?.source_url || null,\n                    author_info: article._embedded?.author?.[0] || null,\n                    categories_info: article._embedded?.[\"wp:term\"]?.[0]?.map((cat)=>({\n                            ...cat,\n                            name: this.decodeHtmlEntities(cat.name)\n                        })) || [],\n                    tags_info: article._embedded?.[\"wp:term\"]?.[1]?.map((tag)=>({\n                            ...tag,\n                            name: this.decodeHtmlEntities(tag.name)\n                        })) || [],\n                    seo_title: this.decodeHtmlEntities(article.meta?.rank_math_title || article.title.rendered),\n                    seo_description: this.getPreferredDescription(article.excerpt?.rendered || \"\", article.meta?.rank_math_description || \"\")\n                }));\n        } catch (error) {\n            console.error(\"Error fetching articles:\", error);\n            return [];\n        }\n    }\n    async getArticleBySlug(slug) {\n        try {\n            const response = await fetch(`${this.baseUrl}/posts?slug=${slug}&_embed`, {\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Article not found\");\n            }\n            const articles = await response.json();\n            if (!articles || articles.length === 0) {\n                return null;\n            }\n            const article = articles[0];\n            return {\n                ...article,\n                title: {\n                    ...article.title,\n                    rendered: this.decodeHtmlEntities(article.title.rendered)\n                },\n                excerpt: {\n                    ...article.excerpt,\n                    rendered: this.decodeHtmlEntities(article.excerpt.rendered)\n                },\n                featured_media_url: article._embedded?.[\"wp:featuredmedia\"]?.[0]?.source_url || null,\n                author_info: article._embedded?.author?.[0] || null,\n                categories_info: article._embedded?.[\"wp:term\"]?.[0]?.map((cat)=>({\n                        ...cat,\n                        name: this.decodeHtmlEntities(cat.name)\n                    })) || [],\n                tags_info: article._embedded?.[\"wp:term\"]?.[1]?.map((tag)=>({\n                        ...tag,\n                        name: this.decodeHtmlEntities(tag.name)\n                    })) || [],\n                seo_title: this.decodeHtmlEntities(article.meta?.rank_math_title || article.title.rendered),\n                seo_description: this.getPreferredDescription(article.excerpt?.rendered || \"\", article.meta?.rank_math_description || \"\")\n            };\n        } catch (error) {\n            console.error(\"Error fetching article:\", error);\n            return null;\n        }\n    }\n    async getArticleById(id) {\n        try {\n            const response = await fetch(`${this.baseUrl}/posts/${id}?_embed`, {\n                headers: this.getHeaders()\n            });\n            if (!response.ok) {\n                throw new Error(\"Article not found\");\n            }\n            const article = await response.json();\n            return {\n                ...article,\n                title: {\n                    ...article.title,\n                    rendered: this.decodeHtmlEntities(article.title.rendered)\n                },\n                excerpt: {\n                    ...article.excerpt,\n                    rendered: this.decodeHtmlEntities(article.excerpt.rendered)\n                },\n                featured_media_url: article._embedded?.[\"wp:featuredmedia\"]?.[0]?.source_url || null,\n                author_info: article._embedded?.author?.[0] || null,\n                categories_info: article._embedded?.[\"wp:term\"]?.[0]?.map((cat)=>({\n                        ...cat,\n                        name: this.decodeHtmlEntities(cat.name)\n                    })) || [],\n                tags_info: article._embedded?.[\"wp:term\"]?.[1]?.map((tag)=>({\n                        ...tag,\n                        name: this.decodeHtmlEntities(tag.name)\n                    })) || [],\n                seo_title: this.decodeHtmlEntities(article.meta?.rank_math_title || article.title.rendered),\n                seo_description: this.getPreferredDescription(article.excerpt?.rendered || \"\", article.meta?.rank_math_description || \"\")\n            };\n        } catch (error) {\n            console.error(\"Error fetching article:\", error);\n            return null;\n        }\n    }\n    async getRelatedArticles(currentArticleId, limit = 3) {\n        try {\n            const articles = await this.getArticles();\n            return articles.filter((article)=>article.id.toString() !== currentArticleId).slice(0, limit);\n        } catch (error) {\n            console.error(\"Error fetching related articles:\", error);\n            return [];\n        }\n    }\n    filterJobs(jobs, filters) {\n        if (!filters) return jobs;\n        return jobs.filter((job)=>{\n            // Location filter (province)\n            if (filters.location && !job.lokasi_provinsi.toLowerCase().includes(filters.location.toLowerCase())) {\n                return false;\n            }\n            // City filter (multiple selection)\n            if (filters.cities && filters.cities.length > 0) {\n                const jobCityMatch = filters.cities.some((city)=>job.lokasi_kota.toLowerCase().includes(city.toLowerCase()));\n                if (!jobCityMatch) return false;\n            }\n            // Job type filter (multiple selection)\n            if (filters.jobTypes && filters.jobTypes.length > 0) {\n                if (!filters.jobTypes.includes(job.tipe_pekerjaan)) {\n                    return false;\n                }\n            }\n            // Experience filter (multiple selection)\n            if (filters.experiences && filters.experiences.length > 0) {\n                const experienceMatch = filters.experiences.some((exp)=>job.pengalaman.toLowerCase().includes(exp.toLowerCase()));\n                if (!experienceMatch) return false;\n            }\n            // Education filter (multiple selection)\n            if (filters.educations && filters.educations.length > 0) {\n                if (!filters.educations.includes(job.pendidikan)) {\n                    return false;\n                }\n            }\n            // Industry filter (multiple selection)\n            if (filters.industries && filters.industries.length > 0) {\n                const industryMatch = filters.industries.some((industry)=>job.industry.toLowerCase().includes(industry.toLowerCase()));\n                if (!industryMatch) return false;\n            }\n            // Category filter (multiple selection)\n            if (filters.categories && filters.categories.length > 0) {\n                const categoryMatch = filters.categories.some((category)=>job.kategori_pekerjaan.toLowerCase().includes(category.toLowerCase()));\n                if (!categoryMatch) return false;\n            }\n            // Work policy filter (multiple selection)\n            if (filters.workPolicies && filters.workPolicies.length > 0) {\n                if (!filters.workPolicies.includes(job.kebijakan_kerja)) {\n                    return false;\n                }\n            }\n            // Legacy single filters for backward compatibility\n            if (filters.jobType && job.tipe_pekerjaan !== filters.jobType) {\n                return false;\n            }\n            if (filters.experience && !job.pengalaman.toLowerCase().includes(filters.experience.toLowerCase())) {\n                return false;\n            }\n            if (filters.education && job.pendidikan !== filters.education) {\n                return false;\n            }\n            if (filters.industry && !job.industry.toLowerCase().includes(filters.industry.toLowerCase())) {\n                return false;\n            }\n            if (filters.category && !job.kategori_pekerjaan.toLowerCase().includes(filters.category.toLowerCase())) {\n                return false;\n            }\n            if (filters.workPolicy && job.kebijakan_kerja !== filters.workPolicy) {\n                return false;\n            }\n            return true;\n        });\n    }\n    getMockJobs(filters) {\n        // Fallback mock data\n        const mockJobs = [\n            {\n                id: \"1\",\n                slug: \"frontend-developer-react-js\",\n                title: \"Frontend Developer React.js\",\n                content: \"<p>Kami mencari Frontend Developer yang berpengalaman dengan React.js</p>\",\n                company_name: \"PT. Teknologi Digital Indonesia\",\n                kategori_pekerjaan: \"Software Engineer\",\n                lokasi_provinsi: \"DKI Jakarta\",\n                lokasi_kota: \"Jakarta Selatan\",\n                tipe_pekerjaan: \"Full Time\",\n                pendidikan: \"S1\",\n                industry: \"Teknologi Informasi\",\n                pengalaman: \"2-4 Tahun\",\n                tag: \"React.js, Frontend Developer, JavaScript, TypeScript\",\n                gender: \"Laki-Laki atau Perempuan\",\n                gaji: \"Rp 8-12 Juta\",\n                kebijakan_kerja: \"Hybrid Working\",\n                link: \"#\",\n                sumber_lowongan: \"Nexjob\",\n                created_at: new Date().toISOString(),\n                seo_title: \"Frontend Developer React.js\",\n                seo_description: \"Lowongan Frontend Developer React.js di Jakarta\",\n                _id: {\n                    $oid: \"1\"\n                },\n                id_obj: {\n                    $numberInt: \"1\"\n                }\n            }\n        ];\n        return this.filterJobs(mockJobs, filters);\n    }\n    constructor(){\n        this.baseUrl = \"https://staging.nexjob.tech/wp-json/wp/v2\";\n        this.filtersApiUrl = \"https://staging.nexjob.tech/wp-json/nex/v1/filters-data\";\n        this.authToken = \"\";\n    }\n}\n// Export both the class and a singleton instance\n\nconst wpService = new WordPressService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/wpService.ts\n");

/***/ })

};
;